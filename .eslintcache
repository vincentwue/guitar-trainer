[{"C:\\Users\\vince\\guitar-trainer\\src\\index.tsx":"1","C:\\Users\\vince\\guitar-trainer\\src\\reportWebVitals.ts":"2","C:\\Users\\vince\\guitar-trainer\\src\\App.tsx":"3","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\scales.ts":"4","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\notes.ts":"5","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\intervals.ts":"6","C:\\Users\\vince\\guitar-trainer\\src\\utils\\utils.ts":"7","C:\\Users\\vince\\guitar-trainer\\src\\utils\\store.ts":"8","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\interfaces.ts":"9","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\instruments.ts":"10","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\index.ts":"11","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\chords.ts":"12","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\renderables.ts":"13","C:\\Users\\vince\\guitar-trainer\\src\\components\\SimpleState.tsx":"14","C:\\Users\\vince\\guitar-trainer\\src\\components\\Pattern.tsx":"15","C:\\Users\\vince\\guitar-trainer\\src\\components\\Cell.tsx":"16"},{"size":590,"mtime":1611254323161,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1611254323161,"results":"19","hashOfConfig":"18"},{"size":279,"mtime":1611254323145,"results":"20","hashOfConfig":"18"},{"size":8745,"mtime":1611520781756,"results":"21","hashOfConfig":"18"},{"size":1849,"mtime":1611520791338,"results":"22","hashOfConfig":"18"},{"size":2517,"mtime":1611520815319,"results":"23","hashOfConfig":"18"},{"size":429,"mtime":1611254323161,"results":"24","hashOfConfig":"18"},{"size":1200,"mtime":1611254323161,"results":"25","hashOfConfig":"18"},{"size":119,"mtime":1611046055368,"results":"26","hashOfConfig":"18"},{"size":1566,"mtime":1611254323161,"results":"27","hashOfConfig":"18"},{"size":568,"mtime":1611254323161,"results":"28","hashOfConfig":"18"},{"size":5527,"mtime":1611520787805,"results":"29","hashOfConfig":"18"},{"size":2989,"mtime":1611254323161,"results":"30","hashOfConfig":"18"},{"size":6133,"mtime":1611254323145,"results":"31","hashOfConfig":"18"},{"size":3575,"mtime":1611254323145,"results":"32","hashOfConfig":"18"},{"size":5041,"mtime":1611254323145,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1o33alj",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"36"},"C:\\Users\\vince\\guitar-trainer\\src\\index.tsx",[],["76","77"],"C:\\Users\\vince\\guitar-trainer\\src\\reportWebVitals.ts",[],"C:\\Users\\vince\\guitar-trainer\\src\\App.tsx",["78","79"],"import React, { useEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport SimpleState from \"./components/SimpleState\"\r\n\r\nfunction App() {\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n     <SimpleState/>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\scales.ts",["80","81","82"],"C:\\Users\\vince\\guitar-trainer\\src\\definitions\\notes.ts",[],"C:\\Users\\vince\\guitar-trainer\\src\\definitions\\intervals.ts",[],"C:\\Users\\vince\\guitar-trainer\\src\\utils\\utils.ts",["83"],"\r\ninterface RGB {\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n}\r\n\r\nexport function hexToRgb(hex: string): string {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    if (!result) return \"black\"\r\n    const rgb = {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n    }\r\n    return \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",0.4)\"\r\n}","C:\\Users\\vince\\guitar-trainer\\src\\utils\\store.ts",["84","85","86"],"import create from \"zustand\"\r\nimport { Note, notesArray } from \"../definitions/notes\"\r\nimport { StringInstrument } from \"../definitions/instruments\"\r\nimport { RenderablePattern, renderables } from \"../definitions/renderables\"\r\n\r\n\r\n\r\ntype State = {\r\n    renderables: RenderablePattern[],\r\n\r\n    index1: number,\r\n    index2: number,\r\n\r\n    firstIntervals:boolean,\r\n    secondIntervals:boolean,\r\n\r\n    toggleFirstIntervals:() => void,\r\n    toggleSecondIntervals:() => void,\r\n\r\n    setIndex1: (index: number) => void\r\n    setIndex2: (index: number) => void\r\n    secondHidden:boolean,\r\n    toggleSecondHidden:() => void\r\n}\r\n\r\nexport const useSimpleStore = create<State>(set => ({\r\n    renderables,\r\n\r\n    index1:0,\r\n    index2:0,\r\n\r\n    firstIntervals:false,\r\n    secondIntervals:false,\r\n\r\n    secondHidden:true,\r\n    \r\n    setIndex1: (index1) => set(state => ({ index1 })),\r\n    setIndex2: (index2) => set(state => ({ index2 })),\r\n    toggleSecondHidden: () => set(state => ({ secondHidden:!state.secondHidden })),\r\n    toggleFirstIntervals: () => set(state => ({ firstIntervals:!state.firstIntervals })),\r\n    toggleSecondIntervals: () => set(state => ({ secondIntervals:!state.secondIntervals })),\r\n}))","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\interfaces.ts",[],["87","88"],"C:\\Users\\vince\\guitar-trainer\\src\\definitions\\instruments.ts",[],"C:\\Users\\vince\\guitar-trainer\\src\\definitions\\index.ts",["89","90","91","92","93","94","95","96"],"\r\nimport { specificScales, scales } from \"./scales\"\r\nimport { getStringInstrument, RawStringInstruments } from './instruments';\r\nimport { specificChords } from \"./chords\";\r\nimport { Note, notes } from \"../definitions/notes\";\r\nimport { createRenderablePattern } from \"./renderables\";\r\nimport { intervals, Interval, intervalsArray } from \"../definitions/intervals\";\r\nimport \"./renderables\"\r\n\r\nexport function getInterval(from: Note, to: Note): Interval {\r\n\r\n    const n = ((to.intervalFromC.step - from.intervalFromC.step) + 12) % 12\r\n\r\n    return intervalsArray[n]\r\n\r\n}","C:\\Users\\vince\\guitar-trainer\\src\\definitions\\chords.ts",["97"],"C:\\Users\\vince\\guitar-trainer\\src\\definitions\\renderables.ts",["98","99"],"import { SpecificChord, specificChords } from \"./chords\"\r\nimport { SpecificScale, specificScales } from \"./scales\"\r\nimport { getStringInstrument, RawStringInstruments, StringInstrument } from \"./instruments\"\r\nimport { Interval, intervals } from \"./intervals\"\r\nimport { Note, notes } from \"./notes\"\r\nimport { getInterval } from \".\"\r\n\r\n\r\nexport interface Dictionary<Item> {\r\n    [index: string]: Item\r\n}\r\n\r\n\r\n\r\nexport interface RenderableNote {\r\n    readonly interval: Interval,\r\n    readonly note: Note,\r\n    readonly hidden: boolean,\r\n}\r\n\r\ntype nullOrNumber = null | number\r\n\r\nexport interface RenderablePattern {\r\n\r\n    readonly id: string,\r\n\r\n    readonly strings: RenderableNote[][],\r\n\r\n    readonly fretsArray: nullOrNumber[]\r\n\r\n    readonly source: SpecificChord | SpecificScale,\r\n\r\n    readonly intervals: Interval[],\r\n\r\n    readonly notes: Note[],\r\n\r\n    readonly stringInstrument: StringInstrument,\r\n\r\n}\r\n\r\nexport type Renderable = SpecificChord | SpecificScale\r\n\r\nexport function createRenderablePattern(stringInstrument: StringInstrument, renderable: Renderable): RenderablePattern {\r\n\r\n    const strings = stringInstrument.strings.map(string => {\r\n\r\n        return string.map(note => {\r\n\r\n            const interval = getInterval(renderable.rootNote, note)\r\n\r\n\r\n            return {\r\n                interval, note,\r\n                hidden: !renderable.notes.includes(note),\r\n            }\r\n\r\n        })\r\n\r\n    })\r\n\r\n\r\n    return {\r\n        id: renderable.id,\r\n        intervals: renderable.intervals,\r\n        notes: renderable.notes,\r\n        source: renderable,\r\n        strings: strings as RenderableNote[][],\r\n        stringInstrument,\r\n        fretsArray:makeFretsArray(stringInstrument.fretsCount)\r\n    }\r\n\r\n}\r\n\r\nfunction makeFretsArray(fretscount : number) : nullOrNumber[] {\r\n\r\n    const array : nullOrNumber[] = []\r\n    const show = [3,5,7,9,12,15,17,19,21,24]\r\n    for (let i = 0; i < fretscount; i++) {\r\n        \r\n        if (show.includes(i)) array.push(i)\r\n        else array.push(null)\r\n        \r\n    }\r\n\r\n    return array\r\n\r\n}\r\n\r\nexport const renderables: RenderablePattern[] = generateAllRenderables()\r\n\r\nfunction generateAllRenderables() {\r\n\r\n    const guitar = getStringInstrument(RawStringInstruments.standardGuitar)\r\n    const renderables: RenderablePattern[] = []\r\n\r\n    for (const renderable of [...specificScales, ...specificChords]) {\r\n        const renderablePattern = createRenderablePattern(guitar, renderable)\r\n        renderables.push(renderablePattern)\r\n    }\r\n\r\n    return renderables.filter(e => !e.id.includes(\"-del\"))\r\n\r\n}\r\n\r\n/* export type RenderableState = {\r\n\r\n    renderableArrays: RenderableArray[] | undefined,\r\n\r\n    add(\r\n        stringInstrument: StringInstrument,\r\n        config: \"notes\" | \"intervals\",\r\n        // renderable: Renderable,\r\n        // renderableSecondLayer?: Renderable,\r\n        index?: number,\r\n    ): void, // returns id\r\n\r\n    // removes renderableArray from array.\r\n    remove(id: string): void,\r\n\r\n}\r\n\r\n\r\n\r\n */","C:\\Users\\vince\\guitar-trainer\\src\\components\\SimpleState.tsx",["100","101","102"],"import React from 'react';\r\nimport { useSimpleStore } from '../utils/store';\r\n// import { RenderableArray, RenderableState } from '../definitions/renderables';\r\nimport classes from \"./Pattern.module.css\"\r\nimport Pattern from \"./Pattern\"\r\nimport { SpecificChord } from '../definitions/chords';\r\nimport { renderables } from '../definitions/renderables';\r\nimport { SpecificScale, specificScales } from '../definitions/scales';\r\n\r\nexport default function SimpleState() {\r\n\r\n    const state = useSimpleStore()\r\n    console.log(state)\r\n\r\n    const options = state.renderables.map((renderable, i) => {\r\n        return <option key={i} value={i}>{renderable.id}</option>\r\n    })\r\n\r\n    let presentInScales;\r\n    if (state.renderables[state.index1].source.hasOwnProperty(\"presentInScales\")) {\r\n\r\n        const renderablePattern = state.renderables[state.index1].source as SpecificChord\r\n\r\n        presentInScales = renderablePattern.presentInScales.filter(e => !e.id.includes(\"-del\"))\r\n            // filter to only show scales with specific root note\r\n            .filter(pattern => pattern.id.split(\" \")[0] === state.renderables[state.index1].id.split(\" \")[0])\r\n            .map((specificScale, i) => {\r\n                return <div key={i} >\r\n                    <button\r\n                        style={{ padding: 10, paddingLeft: 40, margin: 10, fontSize: 20, width: 500, textAlign: \"left\" }}\r\n                        onClick={e => {\r\n\r\n                            const abc = renderables.map(renderable => renderable.id).indexOf(specificScale.id)\r\n                            state.setIndex2(abc)\r\n\r\n                        }}>{specificScale.id}</button>\r\n                    {\"  -- base scale:  \" + (specificScale.scale.step + 1) + \" of  \" + specificScale.baseSpecificScale?.id}\r\n                </div>\r\n            })\r\n\r\n    }\r\n\r\n    let containingChords;\r\n\r\n    if (state.renderables[state.index1].source.hasOwnProperty(\"autoChords\")) {\r\n\r\n        const specificScale = state.renderables[state.index1].source as SpecificScale\r\n\r\n        if (specificScale.autoChords) {\r\n\r\n            containingChords = specificScale.autoChords.map((chord, i) => {\r\n\r\n                // const specificChord  = chord as SpecificChord\r\n\r\n                console.log(chord)\r\n\r\n                return <button style={{ fontSize: 20, padding: 10, margin: 20 }} key={i} onClick={e => {\r\n                    const renderable = renderables.find(r => r.id === chord.id)\r\n                    if (renderable) {\r\n\r\n                        const index = renderables.indexOf(renderable)\r\n                        state.setIndex2(index)\r\n                    }\r\n                }}>{(i + 1)}\r\n                    <br></br>\r\n                    {chord.id}\r\n                    <br></br>\r\n                    {specificScale.scale.rawScale.modes[i]}\r\n                </button>\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return <div style={{ fontSize: 20, display: \"flex\", flexDirection: \"column\", height: \"100%\" }}>\r\n\r\n        <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", fontWeight: 'bolder', fontSize: 25, padding: 10, borderBottom: \"2px solid black\", backgroundColor: \"#ff8282\" }}>\r\n            Guitar scale/chord visualizer\r\n            <div style={{ fontSize: 17, paddingLeft: 20, display: \"flex\", fontWeight: 'bolder', alignItems: \"center\", justifyContent: \"center\" }}>\r\n\r\n                <a href=\"https://github.com/vincentwue/guitar-trainer\" target=\"_blank\">more information on github</a>\r\n            </div>\r\n        </div>\r\n        <div >\r\n\r\n        </div>\r\n\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\" }}>\r\n\r\n\r\n            {/*         <label>\r\n            <input type=\"checkbox\" checked={state.firstIntervals} onChange={e => state.toggleFirstIntervals()}></input>\r\n            first intervals\r\n            </label>\r\n            <label>\r\n            <input type=\"checkbox\" checked={state.secondIntervals} onChange={e => state.toggleSecondIntervals()}></input>\r\n            second intervals\r\n        </label> */}\r\n\r\n            <div style={{ width: \"100%\", display: \"flex\", padding: 10 }}>\r\n                <div style={{ width: 500, marginRight: 20, textAlign: \"right\" }}>first layer:</div>\r\n\r\n                <select onChange={e => state.setIndex1(parseFloat(e.target.value))} style={{ fontSize: 20 }} value={state.index1}>\r\n\r\n                    {options}\r\n                </select>\r\n                <button style={{ marginLeft: 20 }} onClick={e => {\r\n                    const index = state.index1\r\n                    state.setIndex1(state.index2)\r\n                    state.setIndex2(index)\r\n                }}>invert</button>\r\n            </div>\r\n            <div style={{ width: \"100%\", display: \"flex\", padding: 10 }}>\r\n\r\n                <div style={{ width: 500, marginRight: 20, textAlign: \"right\" }}>second layer:</div>\r\n\r\n                <select onChange={e => state.setIndex2(parseFloat(e.target.value))} style={{ fontSize: 20 }} value={state.index2}>\r\n                    {options}\r\n\r\n\r\n                </select>\r\n                <div style={{ marginLeft:20 }}>\r\n                    <label>\r\n                        <input type=\"checkbox\" checked={state.secondHidden} onChange={e => state.toggleSecondHidden()}></input>\r\n            hide second layer\r\n        </label>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <Pattern\r\n            secondHidden={state.secondHidden}\r\n            first={state.renderables[state.index1]}\r\n            second={state.renderables[state.index2]}\r\n            firstIntervals={state.firstIntervals}\r\n            secondIntervals={state.secondIntervals}\r\n        />\r\n\r\n        <div style={{ display: presentInScales ? \"flex\" : \"none\", flexDirection: \"column\", alignItems: \"flex-start\", height: 1, flexGrow: 1, overflow: \"auto\" }}>\r\n            {presentInScales}\r\n        </div>\r\n        <div style={{ display: containingChords ? \"flex\" : \"none\", flexDirection: \"row\", justifyContent: \"center\", height: 1, flexGrow: 1, overflow: \"auto\" }}>\r\n            {containingChords}\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\n","C:\\Users\\vince\\guitar-trainer\\src\\components\\Pattern.tsx",["103"],"import React from 'react';\r\nimport { RenderablePattern } from '../definitions/renderables';\r\n// import { RenderableArray, RenderableState } from '../definitions/renderables';\r\nimport { hexToRgb } from '../utils/utils';\r\n// import classes from \"./Pattern.module.css\"\r\nimport Cell, { DisplayType } from \"./Cell\"\r\n\r\ntype PatternProps = {\r\n  first: RenderablePattern,\r\n  second: RenderablePattern,\r\n  secondHidden: boolean,\r\n  firstIntervals: boolean,\r\n  secondIntervals: boolean,\r\n}\r\n\r\nexport default function Pattern(props: PatternProps) {\r\n\r\n  console.log(props)\r\n\r\n  const reversedSecondStrings = props.second.strings\r\n\r\n  const mappedNotes = props.first.strings.map((string, stringIndex) => {\r\n\r\n    const mappedString = string.map((renderableNote, fretIndex) => {\r\n      // const color = hexToRgb(renderableNote.interval.standardColor)\r\n\r\n      let borderRight = \"4px solid grey\";\r\n      let borderLeft = \"4px solid grey\";\r\n      if (fretIndex === 0) borderRight = \"5px solid black\"\r\n      if (fretIndex === 11) borderRight = \"5px solid black\"\r\n      if (fretIndex === 12) borderRight = \"5px solid black\"\r\n      if (fretIndex === 1) borderLeft = \"5px solid black\"\r\n      if (fretIndex === 13) borderLeft = \"5px solid black\"\r\n      if (fretIndex === 12) borderLeft = \"5px solid black\"\r\n      if (fretIndex === 23) borderRight = \"5px solid black\"\r\n      if (fretIndex === 24) borderLeft = \"5px solid black\"\r\n      \r\n      return <div  key={fretIndex}  style={{\r\n        gridColumnStart: fretIndex + 1,\r\n        gridColumnEnd: fretIndex + 2,\r\n        gridRowStart: props.first.strings.length - stringIndex,\r\n        gridRowEnd: props.first.strings.length - stringIndex,\r\n        // backgroundColor: color,\r\n        borderRight,\r\n        borderLeft,\r\n        // minWidth:40,\r\n        // }}>{note.hidden ? \"\" : props.firstIntervals ? note.interval.standardSymbol : note.note.id}</div>\r\n      }}><Cell\r\n        secondHidden={props.secondHidden}\r\n        first={{ renderableNote, colors: DisplayType.Intervals, symbols: DisplayType.Notes }}\r\n        second={{ renderableNote: reversedSecondStrings[stringIndex][fretIndex], colors: DisplayType.Intervals, symbols: DisplayType.Notes }}\r\n      ></Cell></div>\r\n      // if (note.hidden) return <div className={classes.note + \" \" + classes.hidden}></div>\r\n\r\n      // else return <div style={{ backgroundColor: color }} className={classes.text + \" \" + classes.note}>{props.firstIntervals ? note.interval.standardSymbol : note.note.id}</div>\r\n    })\r\n\r\n    return mappedString\r\n  })\r\n\r\n  const mappedFretNumbers = props.first.fretsArray.map((n, i) => {\r\n    return <div key={i} style={{\r\n      gridColumnStart: i + 1,\r\n      gridColumnEnd: i + 2,\r\n      gridRowStart: props.first.strings.length + 2,\r\n      gridRowEnd: props.first.strings.length + 3,\r\n      textAlign:\"center\",\r\n      // minWidth:40,\r\n    }}>{n ? n : \"\"}</div>\r\n  })\r\n  const mappedFretNumbers2 = props.first.fretsArray.map((n, i) => {\r\n    return <div key={i} style={{\r\n      gridColumnStart: i + 1,\r\n      gridColumnEnd: i + 2,\r\n      gridRowStart: 0,\r\n      gridRowEnd: 1,\r\n      textAlign:\"center\",\r\n      // minWidth:40,\r\n    }}>{n ? n : \"\"}</div>\r\n  })\r\n\r\n  return (\r\n    <div >\r\n      <div  style={{\r\n        margin: 10,\r\n        fontSize: 40,\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(\" + props.first.fretsArray.length + \", 1fr)\",\r\n        gridTemplateRows: \"repeat(\" + props.first.strings.length + \", 1fr)\",\r\n      }}>\r\n        {mappedNotes}\r\n        {mappedFretNumbers2}\r\n        {mappedFretNumbers}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\vince\\guitar-trainer\\src\\components\\Cell.tsx",["104","105","106","107","108"],"import React from 'react';\r\nimport { Interval, intervals } from '../definitions/intervals';\r\nimport { Note } from '../definitions/notes';\r\nimport { RenderableNote, RenderablePattern } from '../definitions/renderables';\r\n// import { RenderableArray, RenderableState } from '../definitions/renderables';\r\nimport { hexToRgb } from '../utils/utils';\r\nimport classes from \"./Pattern.module.css\"\r\n\r\nexport interface RenderableCell {\r\n    renderableNote: RenderableNote,\r\n    colors: DisplayType,\r\n    symbols: DisplayType,\r\n}\r\nexport interface CellProps {\r\n    first: RenderableCell,\r\n    second: RenderableCell,\r\n    secondHidden:boolean\r\n}\r\n\r\nexport enum DisplayType {\r\n    Intervals = \"Intervals\",\r\n    Notes = \"Notes\",\r\n}\r\n\r\n\r\n\r\nfunction StringTemplate(props: any) {\r\n\r\n    return <div style={{ display: \"flex\", width: \"100%\", height: \"100%\", alignItems: \"center\", position: \"relative\" }}>\r\n        <div style={{\r\n            display: \"flex\",\r\n            width: \"100%\",\r\n            background: \"black\",\r\n            height: \"1px\"\r\n            /*             display: \"absolute\",\r\n                        top: 1,\r\n                        left: 10,\r\n                        right: 10,\r\n                        bottom:5,\r\n                        backgroundColor: \"black\", */\r\n\r\n        }}></div>\r\n        <div style={{\r\n            position: \"absolute\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n        }}>\r\n\r\n            {props.children}\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default function Pattern(props: CellProps) {\r\n\r\n    // console.log(props)\r\n\r\n    const { first, second } = props;\r\n     const colorFirst = hexToRgb(first.renderableNote.interval.standardColor)\r\n     const colorSecond = hexToRgb(second.renderableNote.interval.standardColor)\r\n\r\n    if (first.renderableNote.hidden && second.renderableNote.hidden) return <StringTemplate />\r\n\r\n    return <div style={{ height: 60 }}>\r\n\r\n        <StringTemplate>\r\n            <div style={{\r\n                position: \"relative\",\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n            }}>\r\n\r\n                <div className=\"first\" style={{\r\n                    position: \"absolute\",\r\n                    display: first.renderableNote.hidden ? \"none\" : \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    top: \"5%\",\r\n                    left: \"5%\",\r\n                    bottom: \"5%\",\r\n                    right: \"5%\",\r\n                    color: \"black\",\r\n                    backgroundColor: colorFirst,\r\n                    // backgroundColor: first.renderableNote.interval === intervals.PerfectUnison? \"grey\" : colorFirst,\r\n                    borderRadius:20,\r\n\r\n                }}>\r\n\r\n                    {props.first.renderableNote.note.id}\r\n                </div>\r\n\r\n                <div className=\"second\" style={{\r\n                    position: \"absolute\",\r\n                    display: second.renderableNote.hidden || props.secondHidden ? \"none\" : \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    top: \"5%\",\r\n                    left: \"5%\",\r\n                    bottom: \"5%\",\r\n                    right: \"5%\",\r\n                    color:\"blue\",\r\n                    fontSize:25,\r\n                    // background:colorSecond,\r\n                    // background:second.renderableNote.interval === intervals.PerfectUnison ? \"red\" : \"black\",\r\n                    border:\"4px solid \" + (second.renderableNote.interval === intervals.PerfectUnison ? \"red\" : \"black\"),\r\n                    // background:\"black\",\r\n                    borderRadius:20,\r\n                }}>\r\n\r\n                    {/* {props.second.renderableNote.interval.standardSymbol} */}\r\n                    {/* {props.second.renderableNote.note.id} */}\r\n                </div>\r\n{/*                 <div className=\"second\" style={{\r\n                    position: \"absolute\",\r\n                    display: second.renderableNote.hidden || props.secondHidden ? \"none\" : \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    top: 0,\r\n                    left: \"80%\",\r\n                    bottom: \"80%\",\r\n                    right: 0,\r\n                    color:\"blue\",\r\n                    fontSize:25,\r\n                    // background:colorSecond,\r\n                    background:second.renderableNote.interval === intervals.PerfectUnison ? \"red\" : \"black\",\r\n                    // background:\"black\",\r\n                    borderRadius:20,\r\n                }}>\r\n\r\n                     {props.second.renderableNote.interval.standardSymbol} \r\n                     {props.second.renderableNote.note.id} \r\n                </div> */}\r\n\r\n            </div>\r\n        </StringTemplate>\r\n    </div>\r\n\r\n}\r\n\r\n",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"117","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":12},{"ruleId":"113","severity":1,"message":"118","line":1,"column":10,"nodeType":"115","messageId":"116","endLine":1,"endColumn":27},{"ruleId":"113","severity":1,"message":"119","line":3,"column":16,"nodeType":"115","messageId":"116","endLine":3,"endColumn":21},{"ruleId":"113","severity":1,"message":"120","line":121,"column":17,"nodeType":"115","messageId":"116","endLine":121,"endColumn":25},{"ruleId":"113","severity":1,"message":"121","line":2,"column":11,"nodeType":"115","messageId":"116","endLine":2,"endColumn":14},{"ruleId":"113","severity":1,"message":"122","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":14},{"ruleId":"113","severity":1,"message":"123","line":2,"column":16,"nodeType":"115","messageId":"116","endLine":2,"endColumn":26},{"ruleId":"113","severity":1,"message":"124","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":26},{"ruleId":"109","replacedBy":"125"},{"ruleId":"111","replacedBy":"126"},{"ruleId":"113","severity":1,"message":"127","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":24},{"ruleId":"113","severity":1,"message":"128","line":2,"column":26,"nodeType":"115","messageId":"116","endLine":2,"endColumn":32},{"ruleId":"113","severity":1,"message":"129","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":29},{"ruleId":"113","severity":1,"message":"130","line":3,"column":31,"nodeType":"115","messageId":"116","endLine":3,"endColumn":51},{"ruleId":"113","severity":1,"message":"131","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":24},{"ruleId":"113","severity":1,"message":"119","line":5,"column":16,"nodeType":"115","messageId":"116","endLine":5,"endColumn":21},{"ruleId":"113","severity":1,"message":"132","line":6,"column":10,"nodeType":"115","messageId":"116","endLine":6,"endColumn":33},{"ruleId":"113","severity":1,"message":"133","line":7,"column":10,"nodeType":"115","messageId":"116","endLine":7,"endColumn":19},{"ruleId":"113","severity":1,"message":"134","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":15},{"ruleId":"113","severity":1,"message":"133","line":4,"column":20,"nodeType":"115","messageId":"116","endLine":4,"endColumn":29},{"ruleId":"113","severity":1,"message":"119","line":5,"column":16,"nodeType":"115","messageId":"116","endLine":5,"endColumn":21},{"ruleId":"113","severity":1,"message":"135","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":15},{"ruleId":"113","severity":1,"message":"127","line":8,"column":25,"nodeType":"115","messageId":"116","endLine":8,"endColumn":39},{"ruleId":"136","severity":1,"message":"137","line":83,"column":17,"nodeType":"138","endLine":83,"endColumn":88},{"ruleId":"113","severity":1,"message":"139","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":18},{"ruleId":"113","severity":1,"message":"140","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":18},{"ruleId":"113","severity":1,"message":"122","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":14},{"ruleId":"113","severity":1,"message":"141","line":4,"column":26,"nodeType":"115","messageId":"116","endLine":4,"endColumn":43},{"ruleId":"113","severity":1,"message":"135","line":7,"column":8,"nodeType":"115","messageId":"116","endLine":7,"endColumn":15},{"ruleId":"113","severity":1,"message":"142","line":66,"column":12,"nodeType":"115","messageId":"116","endLine":66,"endColumn":23},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'SpecificAutoChord' is defined but never used.","'notes' is defined but never used.","'scaleKey' is assigned a value but never used.","'RGB' is defined but never used.","'Note' is defined but never used.","'notesArray' is defined but never used.","'StringInstrument' is defined but never used.",["143"],["144"],"'specificScales' is defined but never used.","'scales' is defined but never used.","'getStringInstrument' is defined but never used.","'RawStringInstruments' is defined but never used.","'specificChords' is defined but never used.","'createRenderablePattern' is defined but never used.","'intervals' is defined but never used.","'Scale' is defined but never used.","'classes' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'hexToRgb' is defined but never used.","'Interval' is defined but never used.","'RenderablePattern' is defined but never used.","'colorSecond' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]